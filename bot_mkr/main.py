import telebot
from telebot import types
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression


# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
df = pd.read_csv('C:/Users/38098/Desktop/bot_mkr/Salary Data.csv')
df.fillna(0, inplace=True)
age = df['Age']  # –í—ñ–∫
years_of_experience = df['Years of Experience']  # –†–æ–∫–∏ –¥–æ—Å–≤—ñ–¥—É
salary = df['Salary']  # –ó–∞—Ä–ø–ª–∞—Ç–Ω—è
X = np.column_stack((age, years_of_experience))
X_train, X_test, y_train, y_test = train_test_split(X, salary, test_size=0.2, random_state=0)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ –ª—ñ–Ω—ñ–π–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó
model = LinearRegression()
model.fit(X_train, y_train)

bot = telebot.TeleBot('YOUR-TELEGRAMBOT-TOKEN')
WAITING_FOR_AGE = 1
WAITING_FOR_EXPERIENCE = 2
user_state = {}
user_data = {}
feedback_mode = False
user_id_to_notify = '259958572'  # ID –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä
def create_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button_mkr = types.KeyboardButton("–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏ –ú–ö–† üõ†Ô∏è")
    button_salary = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –∑–∞—Ä–æ–±—ñ—Ç–Ω—å–æ—ó –ø–ª–∞—Ç–∏ üí∞")
    keyboard.add(button_mkr, button_salary)
    return keyboard

def create_keyboard1():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button_mkr1 = types.KeyboardButton("–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç—É üìä")
    button_salary1 = types.KeyboardButton("–û–±—á–∏—Å–ª–µ–Ω–Ω—è —Ä–µ–≥—Ä–µ—Å—ñ–π —Ä—ñ–∑–Ω–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ üßÆ")
    back = types.KeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è")
    keyboard.add(button_mkr1, button_salary1, back)
    return keyboard

def create_analysis_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [
        types.KeyboardButton("–î–∞—Ç–∞—Å–µ—Ç"),
        types.KeyboardButton("–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ —á–∞—Å—Ç–æ—Ç"),
        types.KeyboardButton("–ì—Ä–∞—Ñ—ñ–∫ –∞–Ω–∞–ª—ñ–∑—É –≤–∏–∫–∏–¥—ñ–≤"),
        types.KeyboardButton("Q-Q plot"),
        types.KeyboardButton("–ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –∑–∞—Ä–æ–±—ñ—Ç–Ω—å–æ—ó –ø–ª–∞—Ç–∏ –≤—ñ–¥ —Ä–æ–∫—ñ–≤ –¥–æ—Å–≤—ñ–¥—É"),
        types.KeyboardButton("–ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –∑–∞—Ä–æ–±—ñ—Ç–Ω—å–æ—ó –ø–ª–∞—Ç–∏ –≤—ñ–¥ –≤—ñ–∫—É"),
        types.KeyboardButton("–û–±—á–∏—Å–ª–µ–Ω–Ω—è –∫–æ—Ä–µ–ª—è—Ü—ñ–π"),
        types.KeyboardButton("–¢–µ–ø–ª–æ–∫–∞—Ä—Ç–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ—ó"),
        types.KeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è")
    ]
    keyboard.add(*buttons)
    return keyboard

def create_regression_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [
        types.KeyboardButton("Random Forest"),
        types.KeyboardButton("–õ—ñ–Ω—ñ–π–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è"),
        types.KeyboardButton("–ü–æ–ª—ñ–Ω–æ–º—ñ–∞–ª—å–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è"),
        types.KeyboardButton("–ù–∞–∑–∞–¥ ‚Ü©Ô∏è")
    ]
    keyboard.add(*buttons)
    return keyboard   

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def handle_start(message):
    bot.send_message(message.chat.id, "–í—ñ—Ç–∞—é –í–∞—Å! –û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –í–∞–º –≤–∞—Ä—ñ–∞–Ω—Ç –Ω–∏–∂—á–µ.", reply_markup=create_keyboard())
    
@bot.message_handler(commands=['help'])
def handle_help(message):
    bot.send_message(message.chat.id, "–¶–µ–π –±–æ—Ç —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–æ–º –≥—Ä—É–ø–∏ –ö–ù-31 –ö–æ–≤–∞–ª—å–∫–æ–≤—Å—å–∫–∏–º –í—ñ—Ç–∞–ª—ñ—î–º.\n–ô–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è - –Ω–∞–≥–ª—è–¥–Ω–µ —Ä–æ–∑–∫—Ä–∏—Ç—Ç—è —Å—É—Ç—Ç—ñ —Ä–æ–±–æ—Ç–∏.", reply_markup=create_keyboard())

@bot.message_handler(commands=['feedback'])
def handle_feedback(message):
    global feedback_mode
    feedback_mode = True
    bot.send_message(message.chat.id, "–î–ª—è –∑–≤'—è–∑–∫—É –∑ –∞–≤—Ç–æ—Ä–æ–º –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é,\n–ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–±–ª–µ–º—É –æ–ø–∏—à—ñ—Ç—å –Ω–∏–∂—á–µ:", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda message: feedback_mode)
def handle_feedback_message(message):
    global feedback_mode
    bot.send_message(user_id_to_notify, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á (ID: {message.chat.id}) –Ω–∞–¥—ñ—Å–ª–∞–≤ –≤–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n{message.text}")
    feedback_mode = False
    bot.send_message(message.chat.id, "–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–≤—Ç–æ—Ä—É.", reply_markup=create_keyboard())

# –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@bot.message_handler(content_types=['text'])
def handle_text_messages(message):
    chat_id = message.chat.id

    if chat_id in user_state and user_state[chat_id] == WAITING_FOR_AGE:
        try:
            user_age = float(message.text)
            user_data[chat_id] = {'age': user_age}
            bot.send_message(chat_id, "–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ–∫—ñ–≤ –¥–æ—Å–≤—ñ–¥—É:")
            user_state[chat_id] = WAITING_FOR_EXPERIENCE
        except ValueError:
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫.")
        return

    elif chat_id in user_state and user_state[chat_id] == WAITING_FOR_EXPERIENCE:
        try:
            user_experience = float(message.text)

        # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ –¥–ª—è –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –∑–∞—Ä–ø–ª–∞—Ç–∏
            age = user_data[chat_id]['age']
            if age <= user_experience:
                bot.send_message(chat_id, "–†–æ–∫–∏ –¥–æ—Å–≤—ñ–¥—É –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –±—ñ–ª—å—à–∏–º–∏ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ –≤–∞—à–∏–º —Ä–æ–∫–∞–º! –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ—Å–≤—ñ–¥—É.")
                user_state[chat_id] = WAITING_FOR_EXPERIENCE  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Å—Ç–∞–Ω—É –≤–≤–µ–¥–µ–Ω–Ω—è –¥–æ—Å–≤—ñ–¥—É
            if (age == 0) or (user_experience == 0):# –í–∏–∫–æ–Ω–∞—Ç–∏ –ø–µ–≤–Ω—ñ –¥—ñ—ó, —è–∫—â–æ –≤—ñ–∫ –∞–±–æ –¥–æ—Å–≤—ñ–¥ –¥–æ—Ä—ñ–≤–Ω—é
                bot.send_message(chat_id, "–†–æ–∫–∏ –¥–æ—Å–≤—ñ–¥—É –∞–±–æ –≤—ñ–∫ –Ω–µ –º–æ–∂—É—Ç—å –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ 0!")
                user_state[chat_id] = WAITING_FOR_EXPERIENCE  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Å—Ç–∞–Ω—É –≤–≤–µ–¥–µ–Ω–Ω—è –¥–æ—Å–≤—ñ–¥—É
            else:
                user_data[chat_id]['experience'] = user_experience
                predicted_salary = model.predict(np.array([[age, user_experience]]))
                
                bot.send_message(chat_id, f"–ù–∞ –æ—Å–Ω–æ–≤—ñ –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö, –ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–Ω—è: {predicted_salary[0]:.2f}")
            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                del user_state[chat_id]
                del user_data[chat_id]
        except ValueError:
            bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ–∫—ñ–≤ –¥–æ—Å–≤—ñ–¥—É.")
        return

    if message.text == "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç—É üìä":
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¥–∞–Ω–∏—Ö:", reply_markup=create_analysis_keyboard())
        return
    
    elif message.text in ["–î–∞—Ç–∞—Å–µ—Ç", "–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ —á–∞—Å—Ç–æ—Ç", "–ì—Ä–∞—Ñ—ñ–∫ –∞–Ω–∞–ª—ñ–∑—É –≤–∏–∫–∏–¥—ñ–≤", "Q-Q plot", "–ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –∑–∞—Ä–æ–±—ñ—Ç–Ω—å–æ—ó –ø–ª–∞—Ç–∏ –≤—ñ–¥ —Ä–æ–∫—ñ–≤ –¥–æ—Å–≤—ñ–¥—É", "–ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –∑–∞—Ä–æ–±—ñ—Ç–Ω—å–æ—ó –ø–ª–∞—Ç–∏ –≤—ñ–¥ –≤—ñ–∫—É", "–û–±—á–∏—Å–ª–µ–Ω–Ω—è –∫–æ—Ä–µ–ª—è—Ü—ñ–π", "–¢–µ–ø–ª–æ–∫–∞—Ä—Ç–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ—ó","–ù–∞–∑–∞–¥ ‚Ü©Ô∏è"]:
        # –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π
        # –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
        if message.text == "–î–∞—Ç–∞—Å–µ—Ç":
            bot.send_message(message.chat.id, "–ù–∞ —Ñ–æ—Ç–æ –≤–∏ –±–∞—á–∏—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –º–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É")
            bot.send_photo(message.chat.id, open('df.png', 'rb'))
            return
        
        elif message.text == "–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ —á–∞—Å—Ç–æ—Ç":
            bot.send_message(message.chat.id, "–ù–∞ —Ñ–æ—Ç–æ –≤–∏ –±–∞—á–∏—Ç–µ –≥—Ä–∞—Ñ—ñ–∫ —á–∞—Å—Ç–æ—Ç–Ω–æ—ó –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —Ä–æ–∑–º—ñ—Ä—É –∑–∞—Ä–æ–±—ñ—Ç–Ω—ñ—Ö –ø–ª–∞—Ç")
            bot.send_photo(message.chat.id, open('gistograma_valuefrequency.png', 'rb'))
            return
        
        elif message.text == "–ì—Ä–∞—Ñ—ñ–∫ –∞–Ω–∞–ª—ñ–∑—É –≤–∏–∫–∏–¥—ñ–≤":
            bot.send_message(message.chat.id, "–í–∏–∑–Ω–∞—á–∞—î–º–æ –≤–∏–¥–∏—Ç–∏ –¥–ª—è –∑–∞—Ä–æ–±—ñ—Ç–Ω—ñ—Ö –ø–ª–∞—Ç")
            bot.send_photo(message.chat.id, open('limits_salary.png', 'rb'))
            return
        
        elif message.text == "Q-Q plot":
            bot.send_message(message.chat.id, "–ù–∞ —Ñ–æ—Ç–æ –≤–∏ –±–∞—á–∏—Ç–µ Q-Q –≥—Ä–∞—Ñ—ñ–∫")
            bot.send_photo(message.chat.id, open('q-q_plot.png', 'rb'))
            return
        
        elif message.text == "–ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –∑–∞—Ä–æ–±—ñ—Ç–Ω—å–æ—ó –ø–ª–∞—Ç–∏ –≤—ñ–¥ —Ä–æ–∫—ñ–≤ –¥–æ—Å–≤—ñ–¥—É":
            bot.send_message(message.chat.id, "–ì—Ä–∞—Ñ—ñ–∫ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –ó–ü –≤—ñ–¥ —Ä–æ–∫—ñ–≤ –¥–æ—Å–≤—ñ–¥—É")
            bot.send_photo(message.chat.id, open('salary_years_of_experience.png', 'rb'))
            return
        
        elif message.text == "–ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –∑–∞—Ä–æ–±—ñ—Ç–Ω—å–æ—ó –ø–ª–∞—Ç–∏ –≤—ñ–¥ –≤—ñ–∫—É":
            bot.send_message(message.chat.id, "–ì—Ä–∞—Ñ—ñ–∫ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –ó–ü –≤—ñ–¥ –≤—ñ–∫—É")
            bot.send_photo(message.chat.id, open('salary_age.png', 'rb'))
            return
        
        elif message.text == "–û–±—á–∏—Å–ª–µ–Ω–Ω—è –∫–æ—Ä–µ–ª—è—Ü—ñ–π":
            bot.send_message(message.chat.id, "–û–±—á–∏—Å–ª–µ–Ω–Ω—è –∫–æ—Ä–µ–ª—è—Ü—ñ–π —Ä—ñ–∑–Ω–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏")
            bot.send_photo(message.chat.id, open('correlations.png', 'rb'))
            return
        
        elif message.text == "–¢–µ–ø–ª–æ–∫–∞—Ä—Ç–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ—ó":
            bot.send_message(message.chat.id, "–ú–∞—Ç—Ä–∏—Ü—è —Ç–µ–ø–ª–æ–∫–∞—Ä—Ç –∫–æ—Ä–µ–ª—è—Ü—ñ–π")
            bot.send_photo(message.chat.id, open('teplocard_correlations.png', 'rb'))      
            return
        
        elif message.text == "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è":
            bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –í–∞–º –≤–∞—Ä—ñ–∞–Ω—Ç –Ω–∏–∂—á–µ.", reply_markup=create_keyboard())
            return
        
    if message.text == "–û–±—á–∏—Å–ª–µ–Ω–Ω—è —Ä–µ–≥—Ä–µ—Å—ñ–π —Ä—ñ–∑–Ω–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ üßÆ":
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=create_regression_keyboard())
        return
    
    elif message.text in ["Random Forest","–õ—ñ–Ω—ñ–π–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è","–ü–æ–ª—ñ–Ω–æ–º—ñ–∞–ª—å–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è","–ù–∞–∑–∞–¥ ‚Ü©Ô∏è"]:
        # –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π
        # –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
        if message.text == "Random Forest":
            bot.send_message(message.chat.id, "–ù–∞ —Ñ–æ—Ç–æ –≤–∏ –±–∞—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Ä–µ–≥—Ä–µ—Å—ñ—ó –∞–Ω—Å–∞–º–±–ª–µ–≤–∏–º –º–µ—Ç–æ–¥–æ–º")
            bot.send_photo(message.chat.id, open('randomforest.png', 'rb'))
            return
        
        elif message.text == "–õ—ñ–Ω—ñ–π–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è":
            bot.send_message(message.chat.id, "–ù–∞ —Ñ–æ—Ç–æ –≤–∏ –±–∞—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Ä–µ–≥—Ä–µ—Å—ñ—ó –ª—ñ–Ω—ñ–π–Ω–∏–º –º–µ—Ç–æ–¥–æ–º")
            bot.send_photo(message.chat.id, open('lineal.png', 'rb'))   
            return
        
        elif message.text == "–ü–æ–ª—ñ–Ω–æ–º—ñ–∞–ª—å–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è":
            bot.send_message(message.chat.id, "–ù–∞ —Ñ–æ—Ç–æ –≤–∏ –±–∞—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Ä–µ–≥—Ä–µ—Å—ñ—ó –ø–æ–ª—ñ–Ω–æ–º—ñ–∞–ª—å–Ω–∏–º –º–µ—Ç–æ–¥–æ–º")
            bot.send_photo(message.chat.id, open('polinomial.png', 'rb'))  
            return  
          

    elif message.text == "–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏ –ú–ö–† üõ†Ô∏è":
        bot.send_message(message.chat.id, "–¢—É—Ç –±—É–¥—É—Ç—å –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –ú–ö–†.", reply_markup=create_keyboard1())
        return
    
    elif message.text == "–ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –∑–∞—Ä–æ–±—ñ—Ç–Ω—å–æ—ó –ø–ª–∞—Ç–∏ üí∞":
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –≤—ñ–∫:")
        user_state[chat_id] = WAITING_FOR_AGE
        return
    
    elif message.text == "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è":
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –í–∞–º –≤–∞—Ä—ñ–∞–Ω—Ç –Ω–∏–∂—á–µ.", reply_markup=create_keyboard())
        return
    

    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—é –∫–æ–º–∞–Ω–¥—É. –í–∏ –º–æ–∂–µ—Ç–µ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –∫–æ–º–∞–Ω–¥–æ—é /help, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç–∞.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.polling(none_stop=True)
